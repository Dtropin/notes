Необходимо, чтобы интерфейс который ты поставляешь третьим лицам можно было легко использовать и при этом тяжело заиспользовать "неправильно"

Many client errors can be prevented by the introduction of new types

Например:

public:
Date(int month, int day, int year);


Date d(30, 3, 1995); - =ошибка т.к. 30 месяц. Это не удобно т.к. можно опечататься. Разумно внести новый тип данных:

struct Day {
explicit Day(int d):val(d){}

int val;


}



Date d(Day(30), Month(3), YEAR(1995)); - error, day instead of month

Date d(Month(3), Day(30), Year(1995)); - ok.

Но тут тоже есть пространство где ошибится - можно неверно задать день в Day - Day(40);

Чтобы избежать и этого:

class Month {
public:
static Month Jan() { return Month(1); } // functions returning all valid
static Month Feb() { return Month(2); } // Month values; see below for
... // why these are functions, not
static Month Dec() { return Month(12); } // objects
... // other member functions
private:
explicit Month(int m); // prevent creation of new
// Month values
... // month-specific data
};


И затем используем - 

Date d(Month::Mar(), Day(30), Year(1995));


Также, полезно возвращать смарт пойнтеры чтобы клиент не забыл удалять объект (НО, только shared, auto поидее свалится с ошибкой т.к. там произойдет копирование сначала а потом удаление локальной переменной)

Any interface that requires that clients remember to do something is prone to incorrect use, because clients can forget to do it

std::tr1::shared_ptr<Investment> createInvestment();










✦ Good interfaces are easy to use correctly and hard to use incorrectly.
You should strive for these characteristics in all your interfaces.
✦ Ways to facilitate correct use include consistency in interfaces and
behavioral compatibility with built-in types.
✦ Ways to prevent errors include creating new types, restricting operations
on types, constraining object values, and eliminating client resource
management responsibilities.
✦ tr1::shared_ptr supports custom deleters. This prevents the crossDLL
problem, can be used to automatically unlock mutexes (see
Item 14), etc.
