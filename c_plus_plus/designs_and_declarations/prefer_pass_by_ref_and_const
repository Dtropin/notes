Передача по значению - довольно затратна как по памяти так и по цпу, т.к. каждый раз происходит вызов конструткора копирования и создается по сути копия объекта которая имеет весьма ограниченный скоуп жизни

Вместо этого лучше передавать так:

void func(const int& i); - тут никаких конструкторов не вызывается (вместо & лучше даже *)

Передача по ссылке также позволяет избежать проблему "slice of derived class"

Есть класс A и его наследник B

Есть функция void func(A a);

Если делать передачу по значению класса B:

B b();

func(b); то в таком случае будет вызван конструктор копирования родителя (т.к. в методе func в качестве параметра указан родитель) и соответственно фичи наследника будут не доступны

Т.е. внутри func, параметр a будет восприниматься как объект класса A!!! Т.к. он по сути и создается при копировании объекта



✦ Prefer pass-by-reference-to-const over pass-by-value. It’s typically
more efficient and it avoids the slicing problem.
✦ The rule doesn’t apply to built-in types and STL iterator and function
object types. For them, pass-by-value is usually appropriate.
