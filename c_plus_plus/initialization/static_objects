
–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã —ç—Ç–æ:
global objects, objects defined at namespace scope,
objects declared static inside classes, objects declared static inside
functions, and objects declared static at file scope


[3~ Static objects inside
functions are known as local static objects (because they‚Äôre local to a
function), and the other kinds of static objects are known as non-local
static objects. Static objects are destroyed when the program exits,
i.e., their destructors are called when main finishes executing

actual problem is this: if initialization
of a non-local static object in one translation unit uses a
non-local static object in a different translation unit, the object it uses
could be uninitialized, because the relative order of initialization of nonlocal
static objects defined in different translation units is undefined. o



!!!
Again, the relative order of initialization of non-local static
objects defined in different translation units is undefined
!!!

–¢.–µ. –µ—Å–ª–∏ –µ—Å—Ç—å –æ–¥–∏–Ω —Å—Ç–∞—Ç–∏–∫ –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç–∏–∫ –æ–±—ä–µ–∫—Ç, –∏ —ç—Ç–∏ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö, —Ç–æ –ø–æ—Ä—è–¥–æ–∫ –∏—Ö –∏–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω



Fortunately, a small design change eliminates the problem entirely.
All that has to be done is to move each non-local static object into its
own function, where it‚Äôs declared static

Clients then call the functions
instead of referring to the objects. In other words, non-local static
objects are replaced with local static objects

–¢.–µ –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞—Ä—É–∂—É —Å—Ç–∞—Ç–∏–∫ –æ–±—ä–µ–∫—Ç, –º—ã –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—Ä—É–∂—É —Å—Ç–∞—Ç–∏–∫ –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏–∫ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç
(–ü–æ —Å—É—Ç–∏ —Å–∏–Ω–≥–ª—Ç–æ–Ω –ø–æ–ª—É—á–∞–µ—Ç—Å—è):
\


FileSystem& tfs() // static method declared in FileSystem class:qw
{
static FileSystem fs; // define and initialize a local static object
return fs; // return a reference to it
}

